{"ast":null,"code":"import _asyncToGenerator from \"/home/luana/cap-13/AngularBot/Frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet ChatComponent = class ChatComponent {\n  constructor(service) {\n    this.service = service;\n    this.blocked = false;\n    this.isOpen = false;\n    this.mensagens = [];\n    this.usuario = true;\n    this.sliceOptions = {\n      start: 0,\n      end: 300,\n      default: 300\n    };\n    this.mensagens.push({\n      mensagem: String('Hi, I am your support agent. How can I assist you?'),\n      usuario: false,\n      error: true,\n      url: \"\"\n    });\n  }\n\n  ngOnInit() {}\n\n  onExpandText(evt) {\n    this.sliceOptions.end = this.sliceOptions.end ? undefined : this.sliceOptions.default;\n  }\n\n  openSupportPopup() {\n    this.isOpen = !this.isOpen;\n  }\n\n  onSubmit() {\n    return this.valor != null ? this.valor : null;\n  }\n\n  preencherMensagem(response, link) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.mensagens.push({\n        mensagem: response,\n        usuario: false,\n        error: false,\n        url: String(link)\n      });\n    })();\n  }\n\n  enviarDado() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      var element = document.getElementById(\"target\");\n\n      if (_this2.valor) {\n        _this2.mensagens.push({\n          mensagem: String(_this2.valor),\n          usuario: true,\n          error: false,\n          url: \"\"\n        });\n\n        if (!_this2.blocked) {\n          const response = yield _this2.service.SendMessage(_this2.valor);\n          _this2.valor = \"\";\n\n          _this2.preencherMensagem(response.data, \"\");\n\n          element.scrollIntoView(false);\n\n          if (response.tag == \"query\") {\n            _this2.blocked = true;\n          }\n        } else {\n          const response = yield _this2.service.SendQuery(_this2.valor);\n          console.log(_this2.valor);\n          _this2.valor = \"\";\n\n          _this2.preencherMensagem(\"I found these courses that may suit your query:\", \"\");\n\n          for (const message of response.data) {\n            console.log(message);\n\n            _this2.preencherMensagem(\"The course \" + message.name + \", rated \" + message.rated + \" is offered by \" + message.host + \"and has difficulty level \" + message.difficultie + \".\\n\\n\" + message.description + \"\\n\\n In this course you will learn: \" + message.skill, message.url);\n          }\n\n          _this2.blocked = false;\n        }\n      } else {\n        _this2.preencherMensagemVazia();\n      }\n    })();\n  }\n\n  sugestion() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      var cursos = [\"python\", \"tensorflow\", \"ia\", \"ti\"];\n      var curso = Math.floor(Math.random() * cursos.length);\n      var random = cursos[curso];\n      _this3.blocked = true;\n      const response = yield _this3.service.SendQuery(random);\n      console.log(curso);\n\n      for (const message of response.data) {\n        console.log(message);\n        console.log(message.url);\n        message.name.link(message.url);\n      }\n\n      _this3.blocked = false;\n    })();\n  }\n\n  preencherMensagemVazia() {\n    this.mensagens.push({\n      mensagem: String('Mensagem vazia. Em que posso lhe ajudar?'),\n      usuario: false,\n      error: true,\n      url: \"\"\n    });\n  }\n\n};\nChatComponent = __decorate([Component({\n  selector: 'app-chat',\n  templateUrl: './chat.component.html',\n  styleUrls: ['./chat.component.scss']\n})], ChatComponent);\nexport { ChatComponent };","map":{"version":3,"sources":["/home/luana/cap-13/AngularBot/Frontend/src/app/pages/chat/chat.component.ts"],"names":["__decorate","Component","ChatComponent","constructor","service","blocked","isOpen","mensagens","usuario","sliceOptions","start","end","default","push","mensagem","String","error","url","ngOnInit","onExpandText","evt","undefined","openSupportPopup","onSubmit","valor","preencherMensagem","response","link","enviarDado","element","document","getElementById","SendMessage","data","scrollIntoView","tag","SendQuery","console","log","message","name","rated","host","difficultie","description","skill","preencherMensagemVazia","sugestion","cursos","curso","Math","floor","random","length","selector","templateUrl","styleUrls"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet ChatComponent = class ChatComponent {\n    constructor(service) {\n        this.service = service;\n        this.blocked = false;\n        this.isOpen = false;\n        this.mensagens = [];\n        this.usuario = true;\n        this.sliceOptions = {\n            start: 0,\n            end: 300,\n            default: 300\n        };\n        this.mensagens.push({\n            mensagem: String('Hi, I am your support agent. How can I assist you?'),\n            usuario: false,\n            error: true,\n            url: \"\",\n        });\n    }\n    ngOnInit() { }\n    onExpandText(evt) {\n        this.sliceOptions.end = this.sliceOptions.end ? undefined : this.sliceOptions.default;\n    }\n    openSupportPopup() {\n        this.isOpen = !this.isOpen;\n    }\n    onSubmit() {\n        return this.valor != null ? this.valor : null;\n    }\n    async preencherMensagem(response, link) {\n        this.mensagens.push({\n            mensagem: response,\n            usuario: false,\n            error: false,\n            url: String(link)\n        });\n    }\n    async enviarDado() {\n        var element = document.getElementById(\"target\");\n        if (this.valor) {\n            this.mensagens.push({\n                mensagem: String(this.valor),\n                usuario: true,\n                error: false,\n                url: \"\",\n            });\n            if (!this.blocked) {\n                const response = await this.service.SendMessage(this.valor);\n                this.valor = \"\";\n                this.preencherMensagem(response.data, \"\");\n                element.scrollIntoView(false);\n                if (response.tag == \"query\") {\n                    this.blocked = true;\n                }\n            }\n            else {\n                const response = await this.service.SendQuery(this.valor);\n                console.log(this.valor);\n                this.valor = \"\";\n                this.preencherMensagem(\"I found these courses that may suit your query:\", \"\");\n                for (const message of response.data) {\n                    console.log(message);\n                    this.preencherMensagem(\"The course \" + message.name + \", rated \" + message.rated + \" is offered by \" + message.host + \"and has difficulty level \" + message.difficultie + \".\\n\\n\" + message.description + \"\\n\\n In this course you will learn: \" + message.skill, message.url);\n                }\n                this.blocked = false;\n            }\n        }\n        else {\n            this.preencherMensagemVazia();\n        }\n    }\n    async sugestion() {\n        var cursos = [\"python\", \"tensorflow\", \"ia\", \"ti\"];\n        var curso = Math.floor(Math.random() * cursos.length);\n        var random = cursos[curso];\n        this.blocked = true;\n        const response = await this.service.SendQuery(random);\n        console.log(curso);\n        for (const message of response.data) {\n            console.log(message);\n            console.log(message.url);\n            message.name.link(message.url);\n        }\n        this.blocked = false;\n    }\n    preencherMensagemVazia() {\n        this.mensagens.push({\n            mensagem: String('Mensagem vazia. Em que posso lhe ajudar?'),\n            usuario: false,\n            error: true,\n            url: \"\",\n        });\n    }\n};\nChatComponent = __decorate([\n    Component({\n        selector: 'app-chat',\n        templateUrl: './chat.component.html',\n        styleUrls: ['./chat.component.scss']\n    })\n], ChatComponent);\nexport { ChatComponent };\n"]},"metadata":{},"sourceType":"module"}