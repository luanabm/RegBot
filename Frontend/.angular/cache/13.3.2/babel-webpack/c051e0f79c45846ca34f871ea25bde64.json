{"ast":null,"code":"import _asyncToGenerator from \"/home/luana/Downloads/TCCC (1)/AngularBot/Frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ChatService {\n  constructor(HttpClient) {\n    this.HttpClient = HttpClient;\n    this.hostname = 'localhost';\n    this.PORT = 5555;\n  }\n\n  SendMessage(message) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const body = new FormData();\n      body.append('message', message);\n      console.log(message);\n      const res = yield _this.HttpClient.post(`http://${_this.hostname}:${5555}/message`, body).toPromise();\n      return res;\n    })();\n  }\n\n  SendQuery(message) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const body = new FormData();\n      body.append('message', message);\n      console.log(message);\n      const res = yield _this2.HttpClient.post(`http://${_this2.hostname}:${5555}/query`, body).toPromise();\n      return res;\n    })();\n  }\n\n  sendAudio(audio) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const body = new FormData();\n      body.append('audio', audio);\n\n      _this3.HttpClient.post(`http://${_this3.hostname}:${5555}/audio`, body).toPromise().then(() => {\n        console.log('audio send');\n      });\n    })();\n  }\n\n  startAudioBack() {\n    const body = new FormData();\n    body.append('message', JSON.stringify({\n      audio: true\n    }));\n    const res = this.HttpClient.post(`http://${this.hostname}:${5555}/`, body).toPromise();\n    console.log(res);\n    return res;\n  }\n\n}\n\nChatService.ɵfac = function ChatService_Factory(t) {\n  return new (t || ChatService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nChatService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ChatService,\n  factory: ChatService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/home/luana/Downloads/TCCC (1)/AngularBot/Frontend/src/app/services/chat.service.ts"],"names":["i0","i1","ChatService","constructor","HttpClient","hostname","PORT","SendMessage","message","body","FormData","append","console","log","res","post","toPromise","SendQuery","sendAudio","audio","then","startAudioBack","JSON","stringify","ɵfac","ChatService_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,WAAN,CAAkB;AACrBC,EAAAA,WAAW,CAACC,UAAD,EAAa;AACpB,SAAKA,UAAL,GAAkBA,UAAlB;AACA,SAAKC,QAAL,GAAgB,WAAhB;AACA,SAAKC,IAAL,GAAY,IAAZ;AACH;;AACKC,EAAAA,WAAW,CAACC,OAAD,EAAU;AAAA;;AAAA;AACvB,YAAMC,IAAI,GAAG,IAAIC,QAAJ,EAAb;AACAD,MAAAA,IAAI,CAACE,MAAL,CAAY,SAAZ,EAAuBH,OAAvB;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ;AACA,YAAMM,GAAG,SAAS,KAAI,CAACV,UAAL,CAAgBW,IAAhB,CAAsB,UAAS,KAAI,CAACV,QAAS,IAAG,IAAK,UAArD,EAAgEI,IAAhE,EAAsEO,SAAtE,EAAlB;AACA,aAAOF,GAAP;AALuB;AAM1B;;AACKG,EAAAA,SAAS,CAACT,OAAD,EAAU;AAAA;;AAAA;AACrB,YAAMC,IAAI,GAAG,IAAIC,QAAJ,EAAb;AACAD,MAAAA,IAAI,CAACE,MAAL,CAAY,SAAZ,EAAuBH,OAAvB;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ;AACA,YAAMM,GAAG,SAAS,MAAI,CAACV,UAAL,CAAgBW,IAAhB,CAAsB,UAAS,MAAI,CAACV,QAAS,IAAG,IAAK,QAArD,EAA8DI,IAA9D,EAAoEO,SAApE,EAAlB;AACA,aAAOF,GAAP;AALqB;AAMxB;;AACKI,EAAAA,SAAS,CAACC,KAAD,EAAQ;AAAA;;AAAA;AACnB,YAAMV,IAAI,GAAG,IAAIC,QAAJ,EAAb;AACAD,MAAAA,IAAI,CAACE,MAAL,CAAY,OAAZ,EAAqBQ,KAArB;;AACA,MAAA,MAAI,CAACf,UAAL,CAAgBW,IAAhB,CAAsB,UAAS,MAAI,CAACV,QAAS,IAAG,IAAK,QAArD,EAA8DI,IAA9D,EACKO,SADL,GAEKI,IAFL,CAEU,MAAM;AACZR,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACH,OAJD;AAHmB;AAQtB;;AACDQ,EAAAA,cAAc,GAAG;AACb,UAAMZ,IAAI,GAAG,IAAIC,QAAJ,EAAb;AACAD,IAAAA,IAAI,CAACE,MAAL,CAAY,SAAZ,EAAuBW,IAAI,CAACC,SAAL,CAAe;AAAEJ,MAAAA,KAAK,EAAE;AAAT,KAAf,CAAvB;AACA,UAAML,GAAG,GAAG,KAAKV,UAAL,CAAgBW,IAAhB,CAAsB,UAAS,KAAKV,QAAS,IAAG,IAAK,GAArD,EAAyDI,IAAzD,EACPO,SADO,EAAZ;AAEAJ,IAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AACA,WAAOA,GAAP;AACH;;AApCoB;;AAsCzBZ,WAAW,CAACsB,IAAZ,GAAmB,SAASC,mBAAT,CAA6BC,CAA7B,EAAgC;AAAE,SAAO,KAAKA,CAAC,IAAIxB,WAAV,EAAuBF,EAAE,CAAC2B,QAAH,CAAY1B,EAAE,CAACG,UAAf,CAAvB,CAAP;AAA4D,CAAjH;;AACAF,WAAW,CAAC0B,KAAZ,GAAoB,aAAc5B,EAAE,CAAC6B,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAE5B,WAAT;AAAsB6B,EAAAA,OAAO,EAAE7B,WAAW,CAACsB,IAA3C;AAAiDQ,EAAAA,UAAU,EAAE;AAA7D,CAAtB,CAAlC","sourcesContent":["import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ChatService {\n    constructor(HttpClient) {\n        this.HttpClient = HttpClient;\n        this.hostname = 'localhost';\n        this.PORT = 5555;\n    }\n    async SendMessage(message) {\n        const body = new FormData();\n        body.append('message', message);\n        console.log(message);\n        const res = await this.HttpClient.post(`http://${this.hostname}:${5555}/message`, body).toPromise();\n        return res;\n    }\n    async SendQuery(message) {\n        const body = new FormData();\n        body.append('message', message);\n        console.log(message);\n        const res = await this.HttpClient.post(`http://${this.hostname}:${5555}/query`, body).toPromise();\n        return res;\n    }\n    async sendAudio(audio) {\n        const body = new FormData();\n        body.append('audio', audio);\n        this.HttpClient.post(`http://${this.hostname}:${5555}/audio`, body)\n            .toPromise()\n            .then(() => {\n            console.log('audio send');\n        });\n    }\n    startAudioBack() {\n        const body = new FormData();\n        body.append('message', JSON.stringify({ audio: true }));\n        const res = this.HttpClient.post(`http://${this.hostname}:${5555}/`, body)\n            .toPromise();\n        console.log(res);\n        return res;\n    }\n}\nChatService.ɵfac = function ChatService_Factory(t) { return new (t || ChatService)(i0.ɵɵinject(i1.HttpClient)); };\nChatService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ChatService, factory: ChatService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}